datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

enum ImageKind {
  SNS_BACKGROUND
  BLOG_BACKGROUND
  REFERENCE
}

enum SessionStatus {
  CREATED
  DRAFTS_READY
  CONTENT_READY
  IMAGES_READY
  COMPLETED
  ERROR
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  generationSessions GenerationSession[]
  histories          History[]
}

model GenerationSession {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  productName       String
  productImageUrl   String?
  priceJpy          Int?
  buyUrl            String?
  systemPromptVer   String

  status       SessionStatus @default(CREATED)
  errorMessage String?

  drafts     Draft[]
  selection  Selection?
  sns        SNSContent?
  blog       BlogContent?
  images     ImageAsset[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId, createdAt])
}

model Draft {
  id        String             @id @default(cuid())
  session   GenerationSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  idx       Int
  text      String
  createdAt DateTime           @default(now())
  @@unique([sessionId, idx])
}

model Selection {
  id           String            @id @default(cuid())
  session      GenerationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId    String            @unique
  selectedIdx  Int
  draftId      String
  createdAt    DateTime          @default(now())
}

model SNSContent {
  id        String            @id @default(cuid())
  session   GenerationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String            @unique

  title     String
  body      String
  hashtags  String[]

  bgImage   ImageAsset?       @relation("SnsBg", fields: [bgImageId], references: [id])
  bgImageId String?           @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogContent {
  id        String            @id @default(cuid())
  session   GenerationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String            @unique

  h1        String
  outline   Json
  bodyMd    String

  bgImage   ImageAsset?       @relation("BlogBg", fields: [bgImageId], references: [id])
  bgImageId String?           @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImageAsset {
  id        String            @id @default(cuid())
  session   GenerationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String

  kind      ImageKind
  objectKey String
  mimeType  String
  width     Int
  height    Int
  prompt    String
  createdAt DateTime          @default(now())

  snsBg  SNSContent[] @relation("SnsBg")
  blogBg BlogContent[] @relation("BlogBg")
}

model History {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  session   GenerationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String   @unique

  title     String?
  pinned    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}